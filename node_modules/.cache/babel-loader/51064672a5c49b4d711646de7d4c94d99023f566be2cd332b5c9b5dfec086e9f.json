{"ast":null,"code":"var _jsxFileName = \"F:\\\\conda\\\\nft_tickets\\\\nft-boneboss\\\\src\\\\utils\\\\interact.js\";\nimport { createAlchemyWeb3 } from \"@alch/alchemy-web3\";\nimport contractABI from \"./abi.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/aC1N39LhBDnTkyZj40eYjhX5-9c73u_n\");\nconst contractAddress = \"0x82Cf04AcD7C16Eeaab5b859D0AB5F219D982d630\";\n\n//0x85bbf85E11f2f3089358EFe9E5258ce6e9B1c2fF\n//call tokenURI \nexport const tokenURI = async tokenId => {\n  if (tokenId < 0 || tokenId >= 100) {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\"\n    };\n  }\n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n  try {\n    const used = await window.contract.methods.tokenURI(tokenId).call({\n      from: window.ethereum.selectedAddress\n    });\n    return {\n      success: true,\n      status: \"✅ NFT圖片地址為:\" + used\n    };\n  } catch (err) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + err.message + \"Please input tokenId in a textbox.\"\n    };\n  }\n};\n\n//call nftused \nexport const nftused = async tokenId => {\n  if (tokenId < 0 || tokenId >= 100) {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\"\n    };\n  }\n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n  try {\n    const used = await window.contract.methods.nftused(tokenId).call({\n      from: window.ethereum.selectedAddress\n    });\n    console.log(tokenId + \"     \" + used);\n    if (used == 1) {\n      return {\n        success: true,\n        status: \"✅ NFT Ticket 可使用\"\n      };\n    } else {\n      return {\n        success: true,\n        status: \"❌ NFT Ticket 已使用\"\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + err.message + \"Please input tokenId in a textbox.\"\n    };\n  }\n};\n\n//verify nft\nexport const verifyNFT = async tokenId => {\n  if (tokenId < 0 || tokenId >= 100) {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\"\n    };\n  }\n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n  try {\n    //check tokenId is wallet address container.\n\n    const ownerOfcall = await window.contract.methods.ownerOf(tokenId).call({\n      from: window.ethereum.selectedAddress\n    });\n    const address = await window.ethereum.request({\n      method: \"eth_accounts\"\n    });\n    console.log(ownerOfcall);\n    console.log(address[0]);\n    if (ownerOfcall.toLowerCase() === address[0]) {\n      //compare address is match\n      //set up your Ethereum transaction\n      const transactionParameters = {\n        from: window.ethereum.selectedAddress,\n        // must match user's active address.\n        to: contractAddress,\n        // Required except during contract publications.\n        data: window.contract.methods.tokenVerify(tokenId).encodeABI() //make call to NFT smart contract\n      };\n      //tokenId set count=10\n      try {\n        const txHash = await window.ethereum.request({\n          method: \"eth_sendTransaction\",\n          params: [transactionParameters]\n        });\n        return {\n          success: true,\n          status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + txHash\n        };\n      } catch (err) {\n        return {\n          success: false,\n          status: \"😥 Something went wrong: \" + err.message + \"Please input tokenId in a textbox.\"\n        };\n      }\n    } else {\n      return {\n        success: false,\n        status: \"Your wallet havn't contain this tokenId.\"\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + err.message\n    };\n  }\n};\n\n//mint\nexport const mintNFT = async count => {\n  if (count !== 1) {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\" + count\n    };\n  }\n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n\n  //set up your Ethereum transaction\n  const transactionParameters = {\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    to: contractAddress,\n    // Required except during contract publications.\n    data: window.contract.methods.mint(1).encodeABI(),\n    //make call to NFT smart contract\n    value: Number(20000000000000000).toString(16)\n  };\n\n  //sign transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    };\n  }\n};\n\n//connect\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n    };\n  }\n};\n\n//call totalSupply\nexport const totalSupply = async () => {\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n  try {\n    const used = await window.contract.methods.totalSupply().call({\n      from: window.ethereum.selectedAddress\n    });\n    return {\n      success: true,\n      status: used\n    };\n  } catch (err) {\n    return {\n      success: false,\n      status: \"load smart contract error!\"\n    };\n  }\n};\n\n//getcurrentwallet\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            rel: \"noreferrer\",\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};","map":{"version":3,"names":["createAlchemyWeb3","contractABI","web3","contractAddress","tokenURI","tokenId","success","status","window","contract","eth","Contract","used","methods","call","from","ethereum","selectedAddress","err","message","nftused","console","log","verifyNFT","ownerOfcall","ownerOf","address","request","method","toLowerCase","transactionParameters","to","data","tokenVerify","encodeABI","txHash","params","mintNFT","count","mint","value","Number","toString","error","connectWallet","addressArray","obj","totalSupply","getCurrentWalletConnected","length"],"sources":["F:/conda/nft_tickets/nft-boneboss/src/utils/interact.js"],"sourcesContent":["import { createAlchemyWeb3 } from \"@alch/alchemy-web3\";\r\nimport contractABI from \"./abi.json\";\r\n\r\n\r\nconst web3 = createAlchemyWeb3(\r\n  \"https://polygon-mumbai.g.alchemy.com/v2/aC1N39LhBDnTkyZj40eYjhX5-9c73u_n\"\r\n);\r\nconst contractAddress = \"0x82Cf04AcD7C16Eeaab5b859D0AB5F219D982d630\";\r\n\r\n//0x85bbf85E11f2f3089358EFe9E5258ce6e9B1c2fF\r\n//call tokenURI \r\nexport const tokenURI = async(tokenId)=>{\r\n  if (tokenId < 0 || tokenId >= 100) {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    };\r\n  }\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n  try{\r\n    const used = await window.contract.methods\r\n      .tokenURI(tokenId)\r\n      .call({ from: window.ethereum.selectedAddress });\r\n    return {\r\n      success: true,\r\n      status: \"✅ NFT圖片地址為:\" + used,\r\n    };\r\n  } catch(err){\r\n    return {\r\n      success: false,\r\n      status:\r\n        \"😥 Something went wrong: \" +\r\n        err.message +\r\n        \"Please input tokenId in a textbox.\",\r\n    };\r\n  }\r\n  \r\n}\r\n\r\n//call nftused \r\nexport const nftused = async(tokenId)=>{\r\n  if (tokenId < 0 || tokenId >= 100) {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    };\r\n  }\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n  try{\r\n    const used = await window.contract.methods\r\n      .nftused(tokenId)\r\n      .call({ from: window.ethereum.selectedAddress });\r\n      console.log(tokenId+\"     \"+used);\r\n    if(used == 1){\r\n      return {\r\n        success: true,\r\n        status: \"✅ NFT Ticket 可使用\",\r\n      };\r\n    }else{\r\n      return {\r\n        success: true,\r\n        status: \"❌ NFT Ticket 已使用\",\r\n      };\r\n    }\r\n    \r\n  } catch(err){\r\n    return {\r\n      success: false,\r\n      status:\r\n        \"😥 Something went wrong: \" +\r\n        err.message +\r\n        \"Please input tokenId in a textbox.\",\r\n    };\r\n  }\r\n  \r\n}\r\n\r\n//verify nft\r\nexport const verifyNFT = async(tokenId)=>{\r\n  if (tokenId < 0 || tokenId >= 100) {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\",\r\n    };\r\n  }\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n  try{\r\n    //check tokenId is wallet address container.\r\n\r\n    const ownerOfcall = await window.contract.methods.ownerOf(tokenId).call({ from: window.ethereum.selectedAddress })\r\n    const address = await window.ethereum.request({\r\n      method: \"eth_accounts\",\r\n    });\r\n    console.log(ownerOfcall)\r\n    console.log(address[0]);\r\n      \r\n      if (ownerOfcall.toLowerCase() === address[0]) { //compare address is match\r\n        //set up your Ethereum transaction\r\n        const transactionParameters = {\r\n          from: window.ethereum.selectedAddress, // must match user's active address.\r\n          to: contractAddress, // Required except during contract publications.\r\n          data: window.contract.methods.tokenVerify(tokenId).encodeABI(), //make call to NFT smart contract\r\n        };\r\n        //tokenId set count=10\r\n        try {\r\n          const txHash = await window.ethereum.request({\r\n            method: \"eth_sendTransaction\",\r\n            params: [transactionParameters],\r\n          });\r\n          return {\r\n            success: true,\r\n            status:\r\n              \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" +\r\n              txHash,\r\n          };\r\n        } catch (err) {\r\n          return {\r\n            success: false,\r\n            status:\r\n              \"😥 Something went wrong: \" +\r\n              err.message +\r\n              \"Please input tokenId in a textbox.\",\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          success: false,\r\n          status: \"Your wallet havn't contain this tokenId.\",\r\n        };\r\n      }\r\n  }catch(err){\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + err.message,\r\n    };\r\n  }\r\n  \r\n}\r\n\r\n\r\n//mint\r\nexport const mintNFT = async (count) => {\r\n  if (count !== 1) {\r\n    return {\r\n      success: false,\r\n      status: \"❗Please make sure all fields are completed before minting.\"+count,\r\n    };\r\n  }\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    to: contractAddress, // Required except during contract publications.\r\n    data: window.contract.methods.mint(1).encodeABI(), //make call to NFT smart contract\r\n    value: Number(20000000000000000).toString(16),\r\n  };\r\n\r\n  //sign transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n      method: \"eth_sendTransaction\",\r\n      params: [transactionParameters],\r\n      \r\n    });\r\n    return {\r\n      success: true,\r\n      status:\r\n        \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" +\r\n        txHash,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n\r\n\r\n//connect\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"};\r\n  }\r\n};\r\n\r\n\r\n//call totalSupply\r\nexport const totalSupply = async()=>{\r\n    //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\r\n  try{\r\n    const used = await window.contract.methods\r\n      .totalSupply()\r\n      .call({ from: window.ethereum.selectedAddress });\r\n      return {\r\n        success: true,\r\n        status:\r\n          used,\r\n      };\r\n      \r\n    \r\n  } catch(err){\r\n    return {\r\n      success: false,\r\n      status:\r\n        \"load smart contract error!\",\r\n    };\r\n  }\r\n  \r\n}\r\n\r\n//getcurrentwallet\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              href={`https://metamask.io/download.html`}\r\n              rel=\"noreferrer\"\r\n            >\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}