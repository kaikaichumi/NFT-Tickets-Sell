{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nvar keccak = function keccak(a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsBuffer)(a);\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nvar keccak256 = function keccak256(a) {\n  return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromString = function keccakFromString(a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromHexString = function keccakFromHexString(a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromArray = function keccakFromArray(a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function _sha256(a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nvar sha256 = function sha256(a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nvar sha256FromString = function sha256FromString(a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nvar sha256FromArray = function sha256FromArray(a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function _ripemd160(a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160 = function ripemd160(a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromString = function ripemd160FromString(a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromArray = function ripemd160FromArray(a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nvar rlphash = function rlphash(a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;","map":{"version":3,"mappings":"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","names":["createHash","require","keccak","a","bits","Error","exports","keccak256","keccakFromString","buf","Buffer","from","keccakFromHexString","keccakFromArray","_sha256","update","digest","sha256","sha256FromString","sha256FromArray","_ripemd160","padded","hash","ripemd160","ripemd160FromString","ripemd160FromArray","rlphash","externals_1","encode"],"sources":["F:\\conda\\nft_tickets\\nft-boneboss\\node_modules\\ethereumjs-util\\src\\hash.ts"],"sourcesContent":["import { keccak224, keccak384, keccak256 as k256, keccak512 } from 'ethereum-cryptography/keccak'\nconst createHash = require('create-hash')\nimport { rlp } from './externals'\nimport { toBuffer, setLengthLeft } from './bytes'\nimport { assertIsString, assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccak = function (a: Buffer, bits: number = 256): Buffer {\n  assertIsBuffer(a)\n  switch (bits) {\n    case 224: {\n      return keccak224(a)\n    }\n    case 256: {\n      return k256(a)\n    }\n    case 384: {\n      return keccak384(a)\n    }\n    case 512: {\n      return keccak512(a)\n    }\n    default: {\n      throw new Error(`Invald algorithm: keccak${bits}`)\n    }\n  }\n}\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexport const keccak256 = function (a: Buffer): Buffer {\n  return keccak(a)\n}\n\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromString = function (a: string, bits: number = 256) {\n  assertIsString(a)\n  const buf = Buffer.from(a, 'utf8')\n  return keccak(buf, bits)\n}\n\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromHexString = function (a: string, bits: number = 256) {\n  assertIsHexString(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromArray = function (a: number[], bits: number = 256) {\n  assertIsArray(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nconst _sha256 = function (a: any): Buffer {\n  a = toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexport const sha256 = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexport const sha256FromString = function (a: string): Buffer {\n  assertIsString(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexport const sha256FromArray = function (a: number[]): Buffer {\n  assertIsArray(a)\n  return _sha256(a)\n}\n\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nconst _ripemd160 = function (a: any, padded: boolean): Buffer {\n  a = toBuffer(a)\n  const hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return setLengthLeft(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160 = function (a: Buffer, padded: boolean): Buffer {\n  assertIsBuffer(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromString = function (a: string, padded: boolean): Buffer {\n  assertIsString(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromArray = function (a: number[], padded: boolean): Buffer {\n  assertIsArray(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexport const rlphash = function (a: rlp.Input): Buffer {\n  return keccak(rlp.encode(a))\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}