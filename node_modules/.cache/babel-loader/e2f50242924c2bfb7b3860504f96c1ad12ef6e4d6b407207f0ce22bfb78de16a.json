{"ast":null,"code":";\n(function (window) {\n  var lastTimer = -1;\n  var install = function (Visibility) {\n    // Run callback every `interval` milliseconds if page is visible and\n    // every `hiddenInterval` milliseconds if page is hidden.\n    //\n    //   Visibility.every(60 * 1000, 5 * 60 * 1000, function () {\n    //       checkNewMails();\n    //   });\n    //\n    // You can skip `hiddenInterval` and callback will be called only if\n    // page is visible.\n    //\n    //   Visibility.every(1000, function () {\n    //       updateCountdown();\n    //   });\n    //\n    // It is analog of `setInterval(callback, interval)` but use visibility\n    // state.\n    //\n    // It return timer ID, that you can use in `Visibility.stop(id)` to stop\n    // timer (`clearInterval` analog).\n    // Warning: timer ID is different from interval ID from `setInterval`,\n    // so don’t use it in `clearInterval`.\n    //\n    // On change state from hidden to visible timers will be execute.\n    Visibility.every = function (interval, hiddenInterval, callback) {\n      Visibility._time();\n      if (!callback) {\n        callback = hiddenInterval;\n        hiddenInterval = null;\n      }\n      lastTimer += 1;\n      var number = lastTimer;\n      Visibility._timers[number] = {\n        visible: interval,\n        hidden: hiddenInterval,\n        callback: callback\n      };\n      Visibility._run(number, false);\n      if (Visibility.isSupported()) {\n        Visibility._listen();\n      }\n      return number;\n    };\n\n    // Stop timer from `every` method by it ID (`every` method return it).\n    //\n    //   slideshow = Visibility.every(5 * 1000, function () {\n    //       changeSlide();\n    //   });\n    //   $('.stopSlideshow').click(function () {\n    //       Visibility.stop(slideshow);\n    //   });\n    Visibility.stop = function (id) {\n      if (!Visibility._timers[id]) {\n        return false;\n      }\n      Visibility._stop(id);\n      delete Visibility._timers[id];\n      return true;\n    };\n\n    // Callbacks and intervals added by `every` method.\n    Visibility._timers = {};\n\n    // Initialize variables on page loading.\n    Visibility._time = function () {\n      if (Visibility._timed) {\n        return;\n      }\n      Visibility._timed = true;\n      Visibility._wasHidden = Visibility.hidden();\n      Visibility.change(function () {\n        Visibility._stopRun();\n        Visibility._wasHidden = Visibility.hidden();\n      });\n    };\n\n    // Try to run timer from every method by it’s ID. It will be use\n    // `interval` or `hiddenInterval` depending on visibility state.\n    // If page is hidden and `hiddenInterval` is null,\n    // it will not run timer.\n    //\n    // Argument `runNow` say, that timers must be execute now too.\n    Visibility._run = function (id, runNow) {\n      var interval,\n        timer = Visibility._timers[id];\n      if (Visibility.hidden()) {\n        if (null === timer.hidden) {\n          return;\n        }\n        interval = timer.hidden;\n      } else {\n        interval = timer.visible;\n      }\n      var runner = function () {\n        timer.last = new Date();\n        timer.callback.call(window);\n      };\n      if (runNow) {\n        var now = new Date();\n        var last = now - timer.last;\n        if (interval > last) {\n          timer.delay = setTimeout(function () {\n            timer.id = setInterval(runner, interval);\n            runner();\n          }, interval - last);\n        } else {\n          timer.id = setInterval(runner, interval);\n          runner();\n        }\n      } else {\n        timer.id = setInterval(runner, interval);\n      }\n    };\n\n    // Stop timer from `every` method by it’s ID.\n    Visibility._stop = function (id) {\n      var timer = Visibility._timers[id];\n      clearInterval(timer.id);\n      clearTimeout(timer.delay);\n      delete timer.id;\n      delete timer.delay;\n    };\n\n    // Listener for `visibilitychange` event.\n    Visibility._stopRun = function (event) {\n      var isHidden = Visibility.hidden(),\n        wasHidden = Visibility._wasHidden;\n      if (isHidden && !wasHidden || !isHidden && wasHidden) {\n        for (var i in Visibility._timers) {\n          Visibility._stop(i);\n          Visibility._run(i, !isHidden);\n        }\n      }\n    };\n    return Visibility;\n  };\n  if (typeof module != 'undefined' && module.exports) {\n    module.exports = install(require('./visibility.core'));\n  } else {\n    install(window.Visibility || require('./visibility.core'));\n  }\n})(window);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}