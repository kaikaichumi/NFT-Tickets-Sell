{"ast":null,"code":"var _jsxFileName = \"F:\\\\conda\\\\nft_tickets\\\\nft-boneboss\\\\src\\\\components\\\\Newsletter.js\";\nimport React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Newsletter = () => {\n  //Token address\n  let myAddress = \"0x13D8CaF1EaBcCBBD00d1E6D2dbB4dc4FECF2a022\";\n  const transfer = async () => {\n    try {\n      if (window.ethereum.isConnected()) {\n        //Metamask request!\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n        if (accounts[0]) try {\n          const params = {\n            from: accounts[0],\n            to: myAddress,\n            value: Number(10000000000000000).toString(16),\n            gas: Number(21000).toString(16),\n            gasPrice: Number(250000).toString(16)\n          };\n          await window.ethereum.enable();\n          const sendHash = await window.ethereum.request({\n            method: \"eth_sendTransaction\",\n            params: [params]\n          });\n          console.log(\"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + sendHash);\n        } catch (err) {\n          console.log(err.message);\n        }\n      } else {\n        console.log(\"Please connect your wallet!\");\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Col, {\n    lg: 12,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newsletter-bx wow slideInUp\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: 10,\n          md: 0,\n          xl: 5,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Donate $0.01 ETH to us\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 5,\n          xl: 7,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-email-bx\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: transfer,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = Newsletter;\nvar _c;\n$RefreshReg$(_c, \"Newsletter\");","map":{"version":3,"names":["React","Col","Row","Newsletter","myAddress","transfer","window","ethereum","isConnected","accounts","request","method","params","from","to","value","Number","toString","gas","gasPrice","enable","sendHash","console","log","err","message"],"sources":["F:/conda/nft_tickets/nft-boneboss/src/components/Newsletter.js"],"sourcesContent":["import React from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\n\r\n\r\nexport const Newsletter = () => {\r\n  //Token address\r\n  let myAddress = \"0x13D8CaF1EaBcCBBD00d1E6D2dbB4dc4FECF2a022\";\r\n  const transfer = async () => {\r\n    try {\r\n      if (window.ethereum.isConnected()) {\r\n        //Metamask request!\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if(accounts[0])\r\n        try {\r\n          const params = {\r\n            from: accounts[0],\r\n            to: myAddress,\r\n            value: Number(10000000000000000).toString(16),\r\n            gas: Number(21000).toString(16),\r\n            gasPrice: Number(250000).toString(16),\r\n          };\r\n          await window.ethereum.enable();\r\n          const sendHash = await window.ethereum.request({\r\n            method: \"eth_sendTransaction\",\r\n            params: [params],\r\n          });\r\n          console.log(\r\n            \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" +\r\n              sendHash\r\n          );\r\n        } catch (err) {\r\n          console.log(err.message);\r\n        }\r\n      } else {\r\n        console.log(\"Please connect your wallet!\");\r\n      }\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col lg={12}>\r\n      <div className=\"newsletter-bx wow slideInUp\">\r\n        <Row>\r\n          <Col lg={10} md={0} xl={5}>\r\n            <h3>\r\n              Donate $0.01 ETH to us \r\n            </h3>\r\n          </Col>\r\n          <Col md={5} xl={7}>\r\n            <div className=\"new-email-bx\">\r\n              <button type=\"submit\" onClick={transfer}>\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AAAC;AAG3C,OAAO,MAAMC,UAAU,GAAG,MAAM;EAC9B;EACA,IAAIC,SAAS,GAAG,4CAA4C;EAC5D,MAAMC,QAAQ,GAAG,YAAY;IAC3B,IAAI;MACF,IAAIC,MAAM,CAACC,QAAQ,CAACC,WAAW,EAAE,EAAE;QACjC;QACA,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;UAC7CC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,IAAGF,QAAQ,CAAC,CAAC,CAAC,EACd,IAAI;UACF,MAAMG,MAAM,GAAG;YACbC,IAAI,EAAEJ,QAAQ,CAAC,CAAC,CAAC;YACjBK,EAAE,EAAEV,SAAS;YACbW,KAAK,EAAEC,MAAM,CAAC,iBAAiB,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;YAC7CC,GAAG,EAAEF,MAAM,CAAC,KAAK,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;YAC/BE,QAAQ,EAAEH,MAAM,CAAC,MAAM,CAAC,CAACC,QAAQ,CAAC,EAAE;UACtC,CAAC;UACD,MAAMX,MAAM,CAACC,QAAQ,CAACa,MAAM,EAAE;UAC9B,MAAMC,QAAQ,GAAG,MAAMf,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;YAC7CC,MAAM,EAAE,qBAAqB;YAC7BC,MAAM,EAAE,CAACA,MAAM;UACjB,CAAC,CAAC;UACFU,OAAO,CAACC,GAAG,CACT,+EAA+E,GAC7EF,QAAQ,CACX;QACH,CAAC,CAAC,OAAOG,GAAG,EAAE;UACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;QAC1B;MACF,CAAC,MAAM;QACLH,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;IAC1B;EACF,CAAC;EAED,oBACE,QAAC,GAAG;IAAC,EAAE,EAAE,EAAG;IAAA,uBACV;MAAK,SAAS,EAAC,6BAA6B;MAAA,uBAC1C,QAAC,GAAG;QAAA,wBACF,QAAC,GAAG;UAAC,EAAE,EAAE,EAAG;UAAC,EAAE,EAAE,CAAE;UAAC,EAAE,EAAE,CAAE;UAAA,uBACxB;YAAA,UAAI;UAEJ;YAAA;YAAA;YAAA;UAAA;QAAK;UAAA;UAAA;UAAA;QAAA,QACD,eACN,QAAC,GAAG;UAAC,EAAE,EAAE,CAAE;UAAC,EAAE,EAAE,CAAE;UAAA,uBAChB;YAAK,SAAS,EAAC,cAAc;YAAA,uBAC3B;cAAQ,IAAI,EAAC,QAAQ;cAAC,OAAO,EAAEpB,QAAS;cAAA,UAAC;YAEzC;cAAA;cAAA;cAAA;YAAA;UAAS;YAAA;YAAA;YAAA;UAAA;QACL;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,KA3DWF,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}